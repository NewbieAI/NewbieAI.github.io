{
  "title": "Building a Multiplayer Game Client on Windows in C++/OpenGL",
  "authors": [
    "Mingzhi Tian"
  ],
  "creationDate": "10/24/2021",
  "lastModified": "3/1/2021, 4:47:49 PM",
  "components": [
    {
      "type": "subtitle",
      "name": "intro",
      "text": "Introduction:"
    },
    {
      "type": "text",
      "name": "intro0",
      "content": "In this article, we will talk about how to build a Windows multiplayer game application. The game we will be building is an imperfect-information variant of the classic board game called *Go*. We will go through the design process, why we decided to use certain technologies, what's going on in the source code, and at the end we will show the results.\n\nThe original motivation for building this software application was to find an sufficiently complex C++ project, and then complete it within a reasonable time frame. I wanted to build something rich enough in features and can be useful to users in the real world. By finishing such a project, I could get the valuable experience in developing a software product from start to finish, take charge every design decision and see through every implementation details. It seemed that an online multiplayer game would be fitting for this purpose and so I went ahead with the idea.\n\nOver the next few month, I created a GUI based game that can run on Windows machines. When the game starts, it will automatically establish a {TCP}/{IP} connection with the server, and display the login interface, from which the user can either create new accounts or sign in within existing credentials. Once signed in, players would enter the game lobby, where join/spectate open games or host their own games.",
      "links": {
        "TCP": "https://en.wikipedia.org/wiki/Internet_protocol_suite",
        "IP": "https://en.wikipedia.org/wiki/Internet_protocol_suite"
      },
      "indented": false
    },
    {
      "type": "image",
      "name": "Figure 1",
      "width": "600",
      "height": "",
      "src": "resources/Images/GoVariantClient/login.png",
      "caption": "The starting screen of the game. The user can sign into the lobby by entering his username and password and then click the \"SUBMIT\" button. Clicking the \"REGISTER\" button will switch to a sign up interface."
    },
    {
      "type": "image",
      "name": "Figure 2",
      "width": "600",
      "height": "",
      "src": "resources/Images/GoVariantClient/lobby.png",
      "caption": "Interface of the game lobby during a test run. In the screenshot, there's currently no active games and the only active user in the server is a dev test account called \"JohnConner\"."
    },
    {
      "type": "text",
      "name": "intro1",
      "content": "In both the lobby and games rooms, players can use in-game chat to communicate with each other, but private messaging is not supported.\n\nAn actual game starts when both players in the game room become \"**READY**\" (there's a button for that). They gameplay will be almost identical to the normal version of *Go* (the rules can be found {here}), except for one important twist: The player's most recent move will be hidden from the opponent, and if two players played on the same position in succession, the second player's stone would override that of the first player. Both players can obtain a score count using in-game tool, and when both players agree on the score, a winner is declared and win/loss statistics are updated for both players. \n\nBuilding this multiplayer game client required the following:\n1. An {IDE} for C++ (we used CodeBlocks and gcc compiler), an {freeglut} distribution of {OpenGL}.\n2. A {webhost} for our {PHP server} and a {MySQL} database (which your webhosting service should provide). An registered domain name and IP address where the server lives.\n3. The {Winsock2} C++ library for socket programming and networking in Windows OS.\n\nIt took some time to set everything up before the actual programming part could begin. Getting OpenGL to work in CodeBlocks required some grunt work, meanwhile finding a free and flexible webhosting service was not an easy task, either. I am also obliged to mention that Microsoft's socket APIs are *emphatically* not user-friendly or well-documented. Nevertheless, difficulties are their to be overcome. The source code can be roughly divided into 4 different categories:\n\n1. The <<Game>> class that contains the core business logic for gameplay.\n2. The <<uimanager.h>> library, which defines the constants and contains the functions used for game graphics and processing user inputs.\n3. The <<networkmanager.h>> that is responsible for networking events: establishing connections (automatic reconnections), sending HTTP requests/parsing HTTP responses.\n4. The <<main.css>> file, the entry point of the entire program where we start the main loop.\n\nWriting this project in C++ turned out to be a very convoluted process. The original task of creating a Desktop client application ended up including building an entire application server in PHP. As it turned out, it's impossible to test the client application without having a server running. Overall, it wasn't too difficult to implement the gameplay itself, but optimizing certain I/O operations proved to be tricky. The task of updating the color of the cursor indicator in **O**(**1**) time, for example, required implementing advanced an data structure called {disjoint set union}. Since I had to learn to use technologies that I had not worked with before, a great deal of effort went into testing, debugging, and validation of decision decisions.\n\nTruth be told, if I were commissioned to produce a software of the exact same functionalities, I would have picked an entirely different technology stack for the job. But committing to a software architecture and a set of restraints forced me to become a stronger programmer. In the future, I expect to port this project to web game that uses the {Websocket} protocol.",
      "links": {
        "here": "https://www.usgo.org/rules-go",
        "disjoint set union": "https://en.wikipedia.org/wiki/Disjoint-set_data_structure",
        "IDE": "https://www.google.com/search?q=c%2B%2B+IDE",
        "OpenGL": "https://www.khronos.org/opengl/",
        "webhost": "https://www.google.com/search?q=Websites+hosting&stick=H4sIAAAAAAAAAONgFuLUz9U3MDQpqDJRQjC1RLKTrfST83Nz8_OsUvLL88oTi1KKVzEKhKcmFWeWpBYrZOQXl2TmpS9ixRDawcoIAJ8B3xlXAAAA&sa=X&ved=2ahUKEwjphJ_elaHuAhUrGFkFHbEXBPwQMSgAMCF6BAgZEAE&biw=990&bih=443",
        "PHP server": "https://github.com/NewbieAI/GoVariant/tree/master/server_files",
        "MySQL": "https://www.mysql.com/",
        "Winsock2": "https://docs.microsoft.com/en-us/windows/win32/api/winsock2/",
        "Websocket": "https://en.wikipedia.org/wiki/WebSocket",
        "freeglut": " https://www.opengl.org/resources/libraries/glut/"
      },
      "indented": false
    },
    {
      "type": "subtitle",
      "name": "design",
      "text": "Design:"
    },
    {
      "type": "text",
      "name": "design0",
      "content": "For a software project on this scale, the designing phase becomes very important. Even after making the effort to plan extensively before diving into the code, I still underestimated how much details should have been sorted out during the design stage. Consequently, I frequently had to pause and re-think my code structure and sometimes struggled to validate \"untested\" technology.\nWhen I started this project, I was a true novice in building production-ready C++ software, and had to learn much as I progressed. It is difficult to plan for certain issues when one cannot accurately anticipate them or doesn't yet know how to resolve them. In this section, we will retrace the design process for the *GoVariantClient* project and hopefully learn from any success or mistakes.",
      "links": {},
      "indented": false
    },
    {
      "type": "text",
      "name": "design1",
      "content": "**Functional Requirements**\n\nWe start the design process by specifying exactly what the end product needs to do. Here's the comprehensive list of features that we want to create:\n\n**1**(**a**). The player can make a request to register a new account by providing a username and password from the user interface.\n**1**(**b**). If a username is available, the server will create a new account in the backend, and respond with a success message. The UI should display a success message to the user.\n**1**(**c**). If the username is taken, the server will respond with an error message. The UI should display an text error.\n\n**2**(**a**). The player can make a request to enter the game lobby by providing a username and password from the user interface.\n**2**(**b**). If the username and password are valid, the server updates the list of active users, and responds with the information that can complete describe current state of the lobby (chat messages, list of games, list of active users). The client UI will display the game lobby (see **Figure 2**).\n**2**(**c**). If the username or password is incorrect, the server will respond with an error message. The UI will display a text error.\n**3**. The user can refresh the list of games (and other lobby information) manually from the UI. Otherwise, the client application should periodically poll the server to obtain an update. If successful, the UI should update what's displayed.\n\n**4**(**a**). The user can requests to create a game from the UI by specifying the desired game settings.\n**4**(**b**). The supported game settings include:\n      i) Game Size; options are **19 x 19**, **13 x 13**, or **9 x 9**.\n      ii) Host takes; options are **Black Stones**, **White Stones**, or **Random**;\n      iii) Game timer; [**TBD**] minutes of reserve time +  [**TBD**] seconds per move;\n      iv) Allow spectators; options are **Yes** or **No**.\n**4**(**c**). If it has not reached capacity limits, the server should allocate a game room, and update the current list of games. The user will enter the game room UI. All active players in the lobby should see the new game on the next update. Otherwise, the server returns an error response, and the user cannot enter the game room.\n\n**5**(**a**). The user can request to join an open game listed in the lobby. If the game is available when the requests reaches the server, the server will add the player to the game room as the opponent and return a success response. Otherwise, the server returns an error message and the player cannot enter the game room.\n**5**(**b**). The user can request to spectate a closed game listed in the lobby if the settings permit. The server will add the player to the game room as a spectator and return a success response. Otherwise, the server returns an error message and the player cannot enter the game room.\n\n**6**. All active users (players and spectators) in a game room will keep polling the server for the most up-to-date state of the game. If the current socket connection is closed, the client application  should establish a new connection.\n\n**7**. The user can request to send chat messages by entering text into a dialog box from the UI from anywhere if he's logged in. If successful, the new chat message will be seen by all active users on the next update and the player will receive a success response. Otherwise, the server will return an error response and the UI will indicate that the message was not sent.\n**Note**: *Message sent inside a game room will only be seen by other in the same game room*. *Messages sent in the lobby will only be seen by other players in the lobby*.\n\n**8**. ~~The game host can change game settings from the game room UI~~ ~Scrapped~\n\n**9**. ~~The host can invite another player from the lobby~~ ~Scapped~\n\n**10**. The player can signal or cancel \"Readiness\" from the UI. If successful, the server will return a response and a confirmation system message will be displayed in the chat area. When both players signal readiness, the game should start and the game timer will start running.\n\n**11**(**a**). The player can make a move (pass is treated as a special move) during his turn. If successfully processed, the server will update the state of the game.\n**11**(**b**). The player can play a move clicking the desired location on the game board. A visual indicator should be displayed to clearly shown where the target location is.\n      i) If the target location represents a legal move, the indicator should be green.\n      ii) If the target location represents an illegal move, the indicator should be red.\n      iii) During counting, the indicator should be blue.\n**11**(**c**). The player can resign at any point during the game by clicking a \"RESIGN\" button from the UI. If successfully processed, the server will declare his opponent the winner and end the game.\n\n**12**(**a**). A player can count the current game score (territory for both players) by clicking the \"COUNT\" button in the game room UI. In the counting interface, the player should be able to mark a group of stones as dead or as alive. To stop counting, click the \"COUNT\" button again.\n**12**(**b**). The player can send a score request to the server once the count is complete. If successfully processed, the server will keep the score, return a success response, and a confirmation system message will be displayed in the chat area.\n**12**(**c**). When both players have sent a score request and the scores agree, the server will declare a winner and end the game. Win/Loss statistics will be updated.\n\n**13**. During and after the game, both players and spectators can view the sequence of past moves using arrow buttons on the UI. The available operations are:\n      i) Go to next move\n      ii) Go to previous move\n      iii) Go to the beginning of the game\n      iv) Go to the last/most recent move\n\n**14**(**a**). From the UI, the user can sign out of the game lobby and return to the starting login screen, leave the current game room, or exist the program altogether.\n**14**(**b**). If the player leaves the game room or closes the program, the client application will automatically send a resign request for any current game that the player has started.\n\nAs anyone can see, building the entire application is not trivial, even if the programmer knows exactly what to do. Figuring out how to implement each of the desired functionalities required a *lot* of research, testing, and debugging.\n\nDuring the design process, I also had a few additional constraints in mind:\n1) I was to complete this project at no cost, especially since there was no plan to commercialize the final product. Every external dependency or services must be open source and free to use.\n2) The project must have reasonable performance. The application must have acceptable latency for a turn-based board game.\n3) The application must have the appropriate security measures. Even nobody would really try to hack me, I did not want to build something that is vulnerable to attacks.\n\nHaving defined our requirements from the application, it is time to find the appropriate technology stack for the job. There maybe have been some spoilers in the Introduction section. Here, we will further clarify the design decisions and explain why they were made.",
      "links": {},
      "indented": false
    },
    {
      "type": "text",
      "name": "design2",
      "content": "**System Architecture**\nOne of the main design considerations when we build software is to choose the appropriate programming languages to use. Luckily, the decision was made easy because I intended to build a C++ project to begin with. Not that I particularly liked C++, but since already I had a reasonably background in C/C++, I wanted to dive deeper into the programming language and use it to build something more advanced.\n\nGenerally speaking, one should always strive to use relevant technologies. Even today, C++ is undoubtedly still a workhorse language for creating PC programs. The choice of programming language dictated the remaining client side tech stack.\n\nFor the application server, I had much more flexibility. Eventually I settled on PHP because that was I decided to use a webserver API and I already knew how to use PHP to build dynamic websites. My priority was to use things that I was certain would work, and PHP is still a relevant server-side language.\n\nHere is a diagram that illustrates the overall system architecture:",
      "links": {},
      "indented": false
    },
    {
      "type": "image",
      "name": "Figure 3",
      "width": "600",
      "height": "",
      "src": "resources/Images/GoVariantClient/architecture.png",
      "caption": "Architecture of the system diagram. The original project concept was heavily focused on the client side of the system, but eventually the server had to be implemented as well."
    },
    {
      "type": "text",
      "name": "design3",
      "content": "*Client Side Architecture*\n\nThe first question I has to answer for on the client side was how to build the Graphic User Interface (**GUI**). The GUI is everything that users can see and interact with. Everything else, however, complicated, happens under the hood.\n\nThe decision was to use OpenGL as our C++ graphics library. It is free, popular, active maintained, and it supports GPU hardware acceleration. In particular, the <<freeglut>> distribution provides the utility to collect user inputs, making it suitable for simple game development. The <<freeglut>> kit also offers built-in basic typographic capabilities, which makes it very useful for creating an in-game chat interface.\n\nAll the important UI functions, namespaces, global constants, were declared inside a header file <<uimanager.h>>. The UI functions will use the APIs offered by OpenGL/freeglut to create my own basic 2D renderer. Their implementations were stored in various <<.cpp>> source files.\n\nThe next question I had to answer for was how to make the game truly multiplayer. To find the solution, I had to read up a lot of documents Internet infrastructure, TCP/IP socket connections, HTTP protocols, *before I even knew what to look for* !!! In case you were wondering, even Electrical Engineers are not taught how the Internet works by default.\n\nThe need to manage all the network traffic in the client-side application added a whole layer of complexity to my project. After much exploration, I learnt that C++ applications on Windows can use Microsoft's <<Winsock2>> API to create IP sockets and establish connections to a server on the Internet. We will use a webserver API, which meant that the server will behave as if it is a dynamic website that responds to incoming HTTP requests, and the client applications will pretend they are browser traffic by constructing their own HTTP requests.\n\nAll the networking capabilities in the application were put in functions that are declared in the header file <<networkmanager.h>>. These functions will make use of the <<Winsock2>> API to carry out specific communications with the server. Different copies of the client application communicate with each other through the server intermediary.\n\nIn the rest of the client-side source code, we will make use of our <<uimanager.h>> and <<networkmanager.h>> API, along with other C++ standard libraries and object-oriented language features, to implement our business logic. The core gameplay mechanics will be implemented inside a <<Game>> class.",
      "links": {},
      "indented": false
    },
    {
      "type": "text",
      "name": "design4",
      "content": "*Server Side Architecture*\n\nThen there is the application server. It is not the focus of this article so will dive in the server source code at all. All the files in the server root directory are available in the \"PHP server\" link in the Introduction section.\n\nBasically, we only need the server to do 2 things: 1. It must host our PHP source files, scripts that automatically run when we receive HTTP requests from the client applications; and 2. It must have access to a database, where we need to store all the user account information, game and lobby data, chat messages, etc.\n\nFor the first requirement, we simply needs to find a webhost that lets me serve PHP files. For the second requirement, we need a MySQL database and the schema for a couple of database tables. I was able to find such a host: {Awardspace} provided a service that make it as painless as I could have hoped.\n\nWith the host, the server can now go online and multiplayer features could be tested. The server includes a several PHP scripts, only <<index.php>> runs automatically for every HTTP request. The APIs avaialable to the client are implemented inside <<core.php>>, meanwhile database access are handled by <<database_control.php>>.",
      "links": {
        "Awardspace": "https://www.awardspace.com/"
      },
      "indented": false
    },
    {
      "type": "subtitle",
      "name": "build",
      "text": "C++ Implementations:"
    },
    {
      "type": "text",
      "name": "build0",
      "content": "In this section we'll go over some of the source code for the client application. While I can't say I followed all the best practices in C++ programming, I can confidently say that I tried my best to learn and apply them. From my observation, C++ as language has evolved a lot in recent years.",
      "links": {},
      "indented": false
    },
    {
      "type": "text",
      "name": "build1",
      "content": "Here is  <<main.cpp>>, the entry point of the program:\n\n<scripts/Cpp/main.cpp>",
      "links": {},
      "indented": false
    },
    {
      "type": "text",
      "name": "build2",
      "content": "Here are <<game.h>> and <<game.cpp>> files, which contain the implementation of the <<Game>> class that stores all the local game data and enables all the game mechanics.\n\n<scripts/Cpp/game.h>\n<scripts/Cpp/game.cpp>",
      "links": {},
      "indented": false
    },
    {
      "type": "text",
      "name": "build3",
      "content": "Then we have <<uimanager.h>>, which important declarations of namespace constants, functions, that are used to build the application GUI. Here is the <<uimanager.h>> header file:\n\n<scripts/Cpp/uimanager.h>\n\nThe functions inside <<uimanager.h>> are implemented in 3 separate files: <<uirender.cpp>>, <<uievent.cpp>>, and <<uimanager.cpp>>. They are shown below.\n    <<uirender.cpp>>\n<scripts/Cpp/uirender.cpp>\n    <<uievent.cpp>>\n<scripts/Cpp/uievent.cpp>\n    <<uimanager.cpp>>\n<scripts/Cpp/uimanager.cpp>",
      "links": {},
      "indented": false
    },
    {
      "type": "text",
      "name": "build4",
      "content": "Any remaining client-side source code concerns Windows networking, which will be thoroughly discussed in the next section.",
      "links": {},
      "indented": false
    },
    {
      "type": "subtitle",
      "name": "networking",
      "text": "Networking:"
    },
    {
      "type": "text",
      "name": "netowrk0",
      "content": "In this section, we'll address how to solve the key networking challenges to creating a Windows multiplayer game. As we will see later, even setting up a basic network connection was a tedious process with Winsock2. I had to complete a separate *NetworkTest* Project in order to validate my network architecture. Here, we will skip the intermediate implementation steps and go straight the final working code. It actually amazes me that this stuff works at all.\n\nThe following <<networkmanager.h>> contains the declaration of all the networking capabilities. Note that all the functions, variables, and constants are declared inside the <<Network>> namespace. Only the server domain name and the port are declared as macros.\n\n<scripts/Cpp/networkmanager.h>",
      "links": {},
      "indented": false
    },
    {
      "type": "text",
      "name": "network1",
      "content": "**Establishing Socket Connections with Winsock2**\n\nOne major issue I encountered during the project was that to get an acceptable performance from our GUI application, network sockets must be non-blocking. It was very hard to figure out how to use non-blocking sockets to communicate with the server given the arcane winsock2 API.\n\nThe following C++ code snippet will let you initiate a socket connection to a remote server given a domain name. If you find it difficult to read and the data structure names impossibly strange, please remember that I did not design the API myself.\n\n<scripts/segments/socket_connection.cpp>\n\nTo establish an initial connection, simply call <<Network::initialize()>>, the program will catch any error if connection fails. When the application detects that a connection has been closed, it will can <<Network::reconnect()>> to reconnect to our application server.",
      "links": {},
      "indented": false
    },
    {
      "type": "text",
      "name": "network2",
      "content": "**Constructing HTTP Requests**\n\nTo actually communicate with the server, it is not enough to open a socket connection. Like most of the Internet, we will use the HTTP protocol to transfer data between the client and the server. Unlike in the browser you just type in the website address and press \"Enter\", we will need to construct our own HTTP requests for every API we have.\n\nThe client application will always generate \"POST\" requests. Every request will use a common HTTP header, but needs to compose its HTTP body to the server know which API to execute.\n\nThe following C++ code snippet implements functions that are responsible for sending requests to the server.\n\n<scripts/segments/http_requests.cpp>\n\nThe <<Network::form_request(int type)>> function will be responsible for forming different types of network requests. Calling the function <<Network::make_request()>> will then send the HTTP request to the server.",
      "links": {},
      "indented": false
    },
    {
      "type": "text",
      "name": "network3",
      "content": "**Creating a Data API and Parsing HTTP Responses**\n\nWhen the server receives an HTTP request, it needs to return a HTTP response. Any data that needs to be sent to the client application will be contained in the HTTP response body. We need to create a Data API so that both the client and the server agree how to encode the game data.\n\nWhen I was building the project, I opted to put plain text with custom syntax inside the server's response body. In hindsight, that was a major design mistake. At the time, the troubles I had with OpenGL and Winsock2 made me unnecessarily wary of integrating yet another 3rd party dependency. Using existing data format, such as XML or JSON would be preferable here.\n\nNevertheless, we will still show the code even if it was suboptimal. The following code contains the function <<Network::get_response()>>, which receives text data from the server, and the function <<Network::parse_response()>>, which uses the data to update the current game state.\n\n<scripts/segments/http_response.cpp>",
      "links": {},
      "indented": false
    },
    {
      "type": "subtitle",
      "name": "result",
      "text": "Results:"
    },
    {
      "type": "text",
      "name": "result0",
      "content": "And that completes the implementation of our Windows client, which does indeed include all the requisite features stated in the design. It was one the most complicated software project that I attempted: starting from only a concept, drafting a design, learning all the pieces of technology along the way and eventually turning it into reality. While there are a couple of things I could've done better, I am quite pleased with the outcome.\n\nThe OpenGL graphics will not look very fancy, after all it was still quit hard to build the UI with a low level graphics library. Even implementing simple things like chat box, text scroll, line breaking, and practically everything else was way trickier that I initially thought.\n\nHere are some additional screenshots of what the client application looks like:",
      "links": {},
      "indented": false
    },
    {
      "type": "image",
      "name": "Figure 4",
      "width": "600",
      "height": "",
      "src": "resources/Images/GoVariantClient/register.png",
      "caption": "The UI of the Account Registeration screen. Clicking the \"SUBMIT\" button will send a register request to the server. If successful, a success message will be displayed on the screen."
    },
    {
      "type": "text",
      "name": "result1",
      "content": "Getting account registration to work was one of the major steps. It meant everything from client-side graphics, event handling, server connection, backend APIs, all worked in perfect sync.",
      "links": {},
      "indented": false
    },
    {
      "type": "image",
      "name": "Figure 5",
      "width": "600",
      "height": "",
      "src": "resources/Images/GoVariantClient/host.png",
      "caption": "The Interface displayed when The player clicks the bottom right \"CREATE GAME\" button. One the Player choose his settings and click \"Confirm\", a host request will be sent to the server to open a new game room with the specified settings."
    },
    {
      "type": "text",
      "name": "result2",
      "content": "The game settings are used to initialize a <<Game>> object that are responsible for making sure the gameplay happens flawlessly. When another player or a spectator joins the game, he/she will get the game settings from the server and create their own local <<Game>> object.",
      "links": {},
      "indented": false
    },
    {
      "type": "image",
      "name": "Figure 6",
      "width": "600",
      "height": "",
      "src": "resources/Images/GoVariantClient/lobby_join.png",
      "caption": "The Lobby Interface after a game has been played. Every page in the lobby displays up to ten games. Players can join the game room by selecting the game and then click on the \"JOIN\" button or the \"WATCH\" button that will appear."
    },
    {
      "type": "text",
      "name": "result3",
      "content": "Once the host game request is processed by the server, the list of games will be seen by anyone who has logged into the game client. The client will periodically poll the server for updated lobby information. The game settings of every game room will be directly displayed.",
      "links": {},
      "indented": false
    },
    {
      "type": "image",
      "name": "Figure 7",
      "width": "600",
      "height": "",
      "src": "resources/Images/GoVariantClient/first_move.png",
      "caption": "Two players has already started a game; notice that the time has started running. Game starts when both players clicked the \"Ready\" button; players can also click the \"Ready\" button again to cancel readiness. The chat area contains some colored texts, which are reserved for system messages. Players' chat messages will use black texts."
    },
    {
      "type": "text",
      "name": "result4",
      "content": "In the screenshot above, the first move has been played. Notice that the black stone is shown in translucent color, this is because the most recent move can be overridden is the opponent happen to play at the same location. Only the player who holds black can see this stone; the opponent will only see an empty board until the next turn.",
      "links": {},
      "indented": false
    },
    {
      "type": "image",
      "name": "Figure 8",
      "width": "600",
      "height": "",
      "src": "resources/Images/GoVariantClient/few_moves.png",
      "caption": "Some additional moves were played. This was a test game and not played seriously. In fact, I have no idea what the styles of actual gameplay would be, since this variant is very dissimilar to the original version of the game."
    },
    {
      "type": "image",
      "name": "Figure 9",
      "width": "600",
      "height": "",
      "src": "resources/Images/GoVariantClient/count.png",
      "caption": "This screenshot is almost identical to the one above except it is in the \"Counting\" interface, where players use in-game tools to get a score estimate. Points that belong to black are marked with the black crosses, same holds for white."
    },
    {
      "type": "text",
      "name": "result6",
      "content": "During the game, players and spectators can use the arrows beneath the board to view the order of moves. If the players wish to know who is ahead or if the game has ended, he can click the \"Count\" button to toggle on the \"Counting\" interface, where stones and enclosed territories will be marked. Players can click on a stone to mark its connected group as dead/alive. In the \"Counting\" interface, players can clicking the \"Score\" button on the right to submit his final count to the server. When both players have submitted a score and the results agree, the server will declare a winner.\n\nYes, there might be a problem if one player doesn't submit a score that makes him lose, but let's just assume we are all gentlemen here.\n\n**How to Get the Game**\n\nThe compiled binaries are not available for download at this point. Since I already took down the application server, the client application will not work in its current state. Resuscitating and maintaining the application server involves looking back into old code and other works that I am not currently inclined to do.\n\nHowever, that does not mean I gave up on this project. A web version of the multiplayer *GoVariant* game should go online at some point later this year.",
      "links": {},
      "indented": false
    }
  ]
}